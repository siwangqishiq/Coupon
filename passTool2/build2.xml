<project name="ant" default="release">
	<!-- ANT环境变量 -->
	<property environment="env" />

	<!-- 应用名称 -->
	<property file="./build.properties" />
	<property name="appName" value="${apk.name}" />
	<!-- 父项目目录 -->
	<property name="parentdir" value="./" />
	<!-- SDK目录(获取操作系统环境变量ANDROID_SDK_HOME的值) -->
	<property name="sdk-folder" value="${android.floder}" />
	<!-- SDK指定平台目录 -->
	<property name="sdk-platform-folder" value="${sdk-folder}/platforms/android-16" />
	<!-- SDK中tools目录 -->
	<property name="sdk-tools" value="${sdk-folder}/tools" />
	<!-- SDK指定平台中tools目录 -->
	<property name="sdk-platform-tools" value="${sdk-folder}/platform-tools" />

	<!-- 使用到的命令(当前系统为windows,如果系统为linux,可将.bat文件替换成相对应的命令) -->
	<property name="aapt" value="${sdk-platform-tools}/aapt" />
	<property name="aidl" value="${sdk-platform-tools}/aidl" />
	<property name="dx" value="${sdk-platform-tools}/dx" />
	<property name="apkbuilder" value="${sdk-tools}/apkbuilder" />
	<property name="jarsigner" value="${env.JAVA_HOME}/bin/jarsigner" />

	<!-- 编译需要的jar; 如果项目使用到地图服务则需要maps.jar -->
	<property name="android-jar" value="${sdk-platform-folder}/android.jar" />
	<property name="android-maps-jar" value="${sdk-folder}/add-ons/addon_google_apis_google_inc_8/libs/maps.jar" />

	<!-- 编译aidl文件所需的预处理框架文件framework.aidl -->
	<property name="framework-aidl" value="${sdk-platform-folder}/framework.aidl" />

	<!-- 生成R文件的相对目录 -->
	<property name="outdir-gen" value="gen" />
	<!-- 编译后的文件放置目录 -->
	<property name="outdir-bin" value="${out.final.file}" />

	<!-- 清单文件 -->
	<property name="manifest-xml" value="AndroidManifest.xml" />
	<property name="parent-manifest-xml" value="${parentdir}/AndroidManifest.xml" />
	<!-- 源文件目录 -->
	<property name="resource-dir" value="res" />
	<property name="parent-resource-dir" value="${parentdir}/res" />
	<property name="asset-dir" value="assets" />
	<!-- java源文件目录 -->
	<property name="srcdir" value="src" />
	<property name="srcdir-zxing" value="zxing" />
	<property name="srcdir-ospath" value="${basedir}/${srcdir}" />
	<property name="srcdir-parent" value="${parentdir}/${srcdir}" />
	<!-- 外部类库所在目录 -->
	<property name="external-lib" value="libs" />
	<property name="external-lib-ospath" value="${basedir}/${external-lib}" />
	<property name="parent-external-lib" value="${parentdir}/${external-lib}" />
	<property name="parent-external-lib-ospath" value="${basedir}/${parent-external-lib}" />
	<!-- 生成class目录 -->
	<property name="outdir-classes" value="${outdir-bin}/classes" />
	<property name="outdir-classes-ospath" value="${outdir-classes}" />

	<!-- classes.dex相关变量 -->
	<property name="dex-file" value="classes.dex" />
	<property name="dex-path" value="${outdir-bin}/${dex-file}" />
	<property name="dex-ospath" value="${dex-path}" />
	
	<!-- 混淆相关 -->
	<property name="proguard-dir" value="${parentdir}/proguard"/>
	<property name="proguard-jar" value="${proguard-dir}/proguard.jar"/>
	<property name="out.classes.unoptimized.dir" value="${outdir-bin}/out"/>
    <property name="out.classes.optimized.dir" value="${outdir-bin}/out/optimized"/>
    <property name="proguard-config" value="${proguard-dir}/proguard.cfg"/>
    <property name="unoptimized" value="unoptimized.jar" />
    <property name="optimized" value="optimized.jar" />

	<!-- 经过aapt生成的资源包文件 -->
	<property name="resources-package" value="${outdir-bin}/resources.ap_" />
	<property name="resources-package-ospath" value="${resources-package}" />

	<!-- 未认证apk包 -->
	<property name="out-unsigned-package" value="${outdir-bin}/${appName}-unsigned.apk" />
	<property name="out-unsigned-package-ospath" value="${out-unsigned-package}" />

	<!-- 证书文件 -->
	<property name="keystore-file" value="${basedir}/Iga-Hanzo-App-Keystore.keystore" />

	<!-- 已认证apk包 -->
	<property name="out-signed-package" value="${outdir-bin}/${appName}.apk" />
	<property name="out-signed-package-ospath" value="${out-signed-package}" />



	<!-- 初始化工作 -->
	<target name="init" >
		<echo>Initializing all output directories...</echo>
		<delete dir="${outdir-bin}" />
		<delete dir="${outdir-gen}" />
		<delete dir="${out.classes.unoptimized.dir}" />
		<delete dir="${out.classes.optimized.dir}" />
		<mkdir dir="${outdir-bin}" />
		<mkdir dir="${outdir-classes}" />
		<mkdir dir="${outdir-gen}" />
		<mkdir dir="${out.classes.unoptimized.dir}" />
		<mkdir dir="${out.classes.optimized.dir}" />
	</target>

	<!-- 根据工程中的资源文件生成R.java文件  -->
	<target name="gen-R" depends="init">
		<echo>Generating R.java from the resources...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-f" />
			<arg value="-m" />
			<arg value="-J" />
			<arg value="${outdir-gen}" />
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<arg value="-M" />
			<arg value="${manifest-xml}" />
			<arg value="-I" />
			<arg value="${android-jar}" />
			<arg value="--auto-add-overlay" />
			</exec>
	</target>

	<!-- 编译aidl文件 -->
	<target name="aidl" depends="gen-R">
		<echo>Compiling .aidl into java files...</echo>
		<apply executable="${aidl}" failonerror="true">
			<!-- 指定预处理文件 -->
			<arg value="-p${framework-aidl}" />
			<!-- aidl声明的目录 -->
			<arg value="-I${srcdir}" />
			<!-- 目标文件目录 -->
			<arg value="-o${outdir-gen}" />
			<!-- 指定哪些文件需要编译 -->
			<fileset dir="${srcdir}">
				<include name="**/*.aidl" />
			</fileset>
		</apply>
	</target>

	<!-- 将工程中的java源文件编译成class文件 -->
	<target name="compile" depends="aidl">
		<echo>Compiling java source code...</echo>
		<javac encoding="utf-8" target="1.6" destdir="${out.classes.unoptimized.dir}" bootclasspath="${android-jar}">
			<src path="${srcdir}" />
			<src path="${srcdir-parent}" />
			<src path="gen" />
			<classpath>
			    <fileset dir="${external-lib}" includes="*.jar" />
			</classpath>
		</javac>
	</target>
	
	<target name="preobfuscate" depends="compile">
        <echo>Preparing to obfuscation...</echo>
    	<jar destfile="${unoptimized}"
	       basedir="${out.classes.unoptimized.dir}"
	       includes="**/**"
	       excludes="optimized/**"/>
    </target>
    
	<!--  Obfuscation with ProGuard   -->
    <target name="optimize" unless="nooptimize" depends="preobfuscate">
        <echo>Proguard obfuscation...</echo>
        <java jar="${proguard-jar}" fork="true" failonerror="true">
            <jvmarg value="-Dmaximum.inlined.code.length=16" />
            <arg value="@${proguard-dir}/proguard.cfg" />
            <arg value="-injars ${unoptimized}" />
            <arg value="-outjars ${optimized}" />
            <arg value="-libraryjars ${android-jar}" />
            <arg value="-libraryjars ${parent-external-lib}" />
        </java>
        <unzip src="${optimized}" dest="${out.classes.optimized.dir}" />
        <!-- Delete optimized jar (now unzipped into bin directory)  -->
        <delete file="${optimized}"/>
        <delete file="${unoptimized}"/>
    </target>
	
	<!-- 将.class文件转化成.dex文件 -->
	<target name="dex" depends="optimize">
		<echo>Converting compiled files and external libraries into a .dex file...</echo>
		<exec executable="${dx}">
			<arg value="--dex" />
			<!-- 输出文件 -->
			<arg value="--output=${dex-ospath}" />
			<!-- 要生成.dex文件的源classes和libraries -->
			<arg value="${out.classes.optimized.dir}" />
			<arg value="${parent-external-lib-ospath}" />
			</exec>
	</target>
	
	<!-- 将资源文件放进输出目录 -->
	<target name="package-res-and-assets">
		<echo>Packaging resources and assets...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-f" />
			<arg value="-M" />
			<arg value="${manifest-xml}" />
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<arg value="-S" />
			<arg value="${parent-resource-dir}" />
			<arg value="-A" />
			<arg value="${asset-dir}" />
			<arg value="-I" />
			<arg value="${android-jar}" />
			<arg value="-F" />
			<arg value="${resources-package}" />
			<arg value="--auto-add-overlay" />
		</exec>
	</target>
	
	<!-- 打包成未签证的apk -->
	<target name="package" depends="dex, package-res-and-assets">
		<echo>Packaging unsigned apk for release...</echo>
		<exec executable="${apkbuilder}" failonerror="true">
			<arg value="${out-unsigned-package-ospath}" />
			<arg value="-u" />
			<arg value="-z" />
			<arg value="${resources-package-ospath}" />
			<arg value="-f" />
			<arg value="${dex-ospath}" />
			<arg value="-nf"/>
			<arg value="${external-lib-ospath}"/>
			<!--<arg value="-rf" />
			<arg value="${srcdir-ospath}" />
		--></exec>
		<echo>It will need to be signed with jarsigner before being published.</echo>
	</target>
	
	<!-- 对apk进行签证 -->
	
	
	<target name="jarsigner" depends="package">
		<echo>Packaging signed apk for release...</echo>
		<exec executable="${jarsigner}" failonerror="true">
			<arg value="-keystore" />
			<arg value="${keystore-file}" />
			<arg value="-storepass" />
			<arg value="sonic333" />
			<arg value="-keypass" />
			<arg value="sonic333" />
			<arg value="-signedjar" />
			<arg value="${out-signed-package-ospath}" />
			<arg value="${out-unsigned-package-ospath}" />
			<!-- 不要忘了证书的别名 -->
			<arg value="taobao-shop-app" />
			<!-- jdk为1.7时  需要此句 -->
			<!-- <arg line="-digestalg SHA1 -sigalg MD5withRSA" /> -->
		</exec>
	</target>
	
	<!-- 发布 -->
	<target name="release" depends="jarsigner">
		<!-- 删除未签证apk -->
		<delete file="${out-unsigned-package-ospath}" />
		<echo>APK is released. path:${out-signed-package-ospath}</echo>
	</target>

</project>